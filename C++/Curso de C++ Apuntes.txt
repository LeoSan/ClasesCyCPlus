Apuntes de la clase

C++ es una extensi√≥n de C pero C++ tiene soporte para clases y objetos, es su principal diferencia.
Un compilador es un programa que traduce c√≥digo de programaci√≥n a c√≥digo maquina, c√≥digo que la computadora entiende y as√≠ puede ejecutar nuestros programas. uno de los primeros compiladores para C++ es Cfront, este fue lanzado oficialmente en octubre de 1893.
En este curso el compilador que utilizaremos se llama GCC ya que este es opensouce.
Un IDE es un programa que contiene m√∫ltiples herramientas que nos ayudar√°n a crear c√≥digo fuente mas f√°cilmente, el IDE que utilizaremos en el curso es Code::Blocks.
Bjarje creador 


*¬øQu√© es la memoria y tipos de datos?

Types: char, short int, int, long int, float, double, long double, bool
Disco duro: Velocidad media, perdura
RAM: Memoria de acceso din√°mico, no perdura

Proceso de memoria: Codificar nuestros datos, almacenar (ram o disco duro) y recuperar cuando los necesitemos

¬øQu√© es un tipo de dato? Es una clasificaci√≥n que le damos a la informaci√≥n para hacer saber al compilador c√≥mo va a ser escrita e interpretada.
Tipos de datos primitivos:
int, float, bool, char

C√≥digo

Diferencia entre memoria ram y disco duro: La memoria ram tiene acceso a 
los datos o los programas de forma aleatoria y lo que se almacena en ella 
es lo que estamos viendo, es decir para mantener abierto tu navegador 
eso es soportado con la memoria ram, el proceso del navegador pasa a almacenarse en la memoria ram. 

Ahora para poder ejecutar el navegador necesitas tenerlo instalado y guardado en algun 
lugar es aqui donde el disco duro lo almacena, el discoduro es el que tiene 
el ejecutable para que la ram lo procese.

Enlaces: 

https://www.asciiart.eu/animals/bears


/-/-*/*-/-*/-*/-*/-*/-*/-*/-*/-*CICLO */-*//*-/-*/-*-*/-*/-*

Ciclo While:

int contador = 0;

	while (contador <= 100)
	{
		cout << contador << endl;
		contador = contador + 1;
	}
Ciclo Do-While:

int contador = 0;

	do
	{
		cout << contador << endl;
		contador = contador + 1;
	} while (contador < 100);
Ciclo For:

for (int i = 0; i <= 100; i++)
	{
		cout << i << endl;
	}


-*/-*/-*/-*/-*/File-*/-*/-/-*/-*
<fstream>: Tiene el mismo uso que FILE, en C, lo que quiere decir que hacemos archivos de entrada de escritura o lectura de archivos abrir y cerrara.
*Mis apuntes sobre: ‚ÄúCreando y leyendo un archivo externo‚Äù:

#include <fstream> --> Librer√≠a gen√©rica creada para el manejo, escritura y lectura de archivos externos al programa.

ofstream --> Tipo de dato para crear flujos de datos de escritura
open/close --> Comandos para abrir y cerrar archivos.

myFile.is_open(); --> devuelve true o false, si est√° abierto o no.
myFile.close(); --> sirve para cerrar el archivo

#include <iostream>
#include <fstream>

using namespace std;

int main()
{
    ofstream myFile("gameData.txt");
    if(myFile.is_open())
    {
        myFile<<"Hi Platzi"<<endl;
        for(int i=0;i<10;i++)
        {
            myFile<<i<<endl;
        }
    }
    myFile.close();
    return 0;
}
*/-*/-*/-*/-*/-*/-/-/-/Orientado OPP-*/-*/-*/-/-/-/-

¬øQu√© es un paradigma de programaci√≥n?
.
Un paradigma de programaci√≥n es una manera o estilo de programaci√≥n de software.

Un paradigma es como decir un ejemplo, un m√©todo o un modelo de programar es un estilo para resolver problemas,  Existen much√≠simos paradigmas, pero los m√°s conocidos y usados son los siguientes:

La programaci√≥n estructurada tambi√©n llamada imperativa, porque se relaciona con emperador, que te dice que hacer y como hacerlo. Otro ejemplo es una receta de cocina que te da paso a paso como hacer un alimento. Este paradigma se puede aplicar en pr√°cticamente todos los lenguajes.

La programaci√≥n declarativa indica que debe hacer, pero generalmente no indica el como, por ejm SQL para bases de datos relacionales.

La programaci√≥n orientada a objetos se ve en la mayor√≠a de lenguajes, es el m√°s querido porque nos permite reutilizar c√≥digo y porque es el m√°s apegado a la realidad. Los objetos tienen dos caracter√≠sticas, los atributos (propiedades) y comportamientos (m√©todos). Pueden tener uno de los dos, o ambos, depende del objeto.

La programaci√≥n funcional tiene como una de sus bases fundamentales la recursividad.
‚ÄúNo hay ciclos‚Äù es decir, se trata de evitar ciclos, sino que todo se basa en notaciones matem√°ticas. En t√©rminos matem√°ticos, la recursividad es mucho m√°s eficiente que utilizar ciclos. Adopta una parte de la programaci√≥n declarativa.

La programaci√≥n dirigida por eventos se refiere a que la estructura y ejecuci√≥n del programa va determinada por los sucesos que puedan ocurrir en el sistema. El lenguaje m√°s com√∫n con este paradigma es JavaScript, en donde se pueden almacenar estos eventos y a partir de estos realizar acciones. (Registrando eventos).

Hoy en d√≠a, en realidad ya muchos lenguajes de programaci√≥n son multiparadigma. Es decir, lenguajes de programaci√≥n que adoptan varios paradigmas de programaci√≥n.

*-/-/-*//-* Clases /-/-*/-*/-/ 

+58 426-4077070



*/-/-/-/-/üî• Naming Conventions in C++ üî•/-*/-*/-*/-*/-*/-*

La regla de oro es que siempre debes sentirte a gusto con tus reglas, de caso contrario, no sirven para nada y solo retrasan tu trabajo üî™
A mi me gusta as√≠: 
üåµ PascalCase para las clases, 
üê´ camelCase para las instancias de las clases y otras variables, 
üêç snake_case para las funciones y 
UPPER_SNAKE_CASE para las constantes (cosas que --en teor√≠a-- nunca cambian en toda la ejecuci√≥n del programa) üéâ


Encapsulaci√≥n: Es el proceso de dise√±ar nuestra clase para que los valores o los datos que se almacenen sean modificados por factores externos
Nota: Esto se hace gracias al principio del menor privilegio, no darle el poder de acceder a una variable, objeto, etc. si no es necesario.


Abstracci√≥n: consiste en dejarle al usuario solo lo esencial que necesita o que usar√°, y mantener privado lo que no requiere o lo que son c√°lculos que no deber√≠a modificar.
Clases Abstractas: son un tipo de clases que, como dijiste, no se pueden instanciar, pero que poseen unos ciertas caracter√≠sticas y funcionalidades comunes o m√°s generales. Estas se usan por lo general con lo que es herencia en programaci√≥n orientada a objetos.
Para que sirve la herencia en POO: Con la herencia todas las clases est√°n clasificadas en una jerrqu√≠a estricta. Cada clase tiene una superclase (la clase superior en la jerarqu√≠a) tambi√©n llamada clase base y cada clase puede tener una o m√°s subclases tambi√©n llamadas clases derivadas. Adem√°s hereda todas las variables y los m√©todos definidos por la superclase y agrega us elementos √∫nicos.
